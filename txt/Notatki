--- Rekursja dobrze ufundowana ---
Wyobraźmy sobie drabinę. Czy zerowy szczebel drabiny jest dostępny?
Aby tak było, każdy szczebel poniżej niego musi być dostępny. Weźmy
więc dowolny szczebel poniżej zerowego. Jednakże takie szczeble nie
istnieją, a zatem zerowy szczebel jest dostępny.

Czy pierwszy szczebel jest dostępny? Aby tak było, dostępne muszą
być wszystkie szczeble poniżej niego, a więc także zerowy, o którym
już wiemy, że jest dostępny. Tak więc pierwszy szczebel też jest
dostępny.

A czy szczebel 2 jest dostępny? Tak, bo szczeble 0 i 1 są dostępne.
A szczebel 3? Tak, bo 0, 1 i 2 są dostępne. Myślę, że widzisz już,
dokąd to zmierza: każdy szczebel tej drabiny jest dostępny.

Możemy tę dostępność zinterpretować na dwa sposoby. Z jednej strony,
jesteśmy w stanie wspiąć się na dowolne wysoki szczebel. Z drugiej
strony, nieważne jak wysoko jesteśmy, zawsze będziemy w stanie zejść
na ziemię w skończonej liczbie kroków.

Powyższy przykład pokazuje nam, że relacja [<] jest dobrze ufundowana.
A co z relacją [<=]?

Czy 0 jest dostępne? Jest tak, jeżeli wszystkie n <= 0 są dostępne.
Jest jedna taka liczba: 0. Tak więc 0 jest dostępne pod warunkiem,
że 0 jest dostępne. Jak widać, wpadliśmy w błędne koło. Jaest tak,
bo w relacji [<=] jest nieskończony łańcuch malejący, mianowicie
[0 <= 0 <= 0 <= 0 <= ...].

Alternatywna charakteryzacja dobrego ufundowania głosi, że relacja
dobrze ufundowana to taka, w której nie ma nieskończonych łańcuchów
malejących. Relacja [<=] nie spełnia tego warunku, nie jest więc
relacją dobrze ufundowaną.

Nasza dobrze ufundowana drabina nie musi być jednak pionowa — mogą
być w niej rozgałęzienia. Żeby to sobie uświadomić, rozważmy taki
porządek: x y : Z i x < y := |x| < |y|.

--- Typy i termy, kanoniczność i uzasadnienie reguł eliminacji ---
Co to są termy? Po polsku: wyrażenia. Są to napisy zbudowane według
pewnych reguł (które będziemy chcieli poznać), które mogą oznaczać
przeróżne rzeczy: zdania logiczne i ich dowody, programy i ich
specyfikacje, obiekty matematyczne takie jak liczby czy funkcje,
struktury danych takie jak napisy czy listy.

Najważniejszym, co wiemy o każdym termie, jest jego typ. Co to jest typ?
To taki klasyfikator, który mówi, czego możemy się po termie spodziewać -
można liczyć za pomocą liczb, ale nie za pomocą wartości logicznych.
Można dowodzić zdań, ale nie napisów. Można skleić ze sobą dwa napisy,
ale nie napis i funkcję etc.

Każdy term ma tylko jeden typ, więc każdy typ możemy sobie wyobrazić jako
wielki worek z termami. Dla przykładu, typ [nat], czyli typ liczb
naturalnych, to worek, w którym są takie wyrażenia, jak:
- 42
- 2 + 2
- 10 * 10
- jeżeli słowo "dupa" zawiera "i", to 123, a w przeciwnym wypadku 765
- długość listy [a, b, c, d, e]

Najważniejsze termy są nazywane elementami. Dla [nat] są to 0, 1, 2,
3, 4, 5 i tak dalej. Elementy wyróżnia to, że są w postaci normalnej/
postaci kanonicznej. Znaczy to intuicyjnie, że są one ostatecznymi wynikami
obliczeń, np.:
- obliczenie 42 daje 42
- obliczenie 2 + 2 daje 4
- obliczenie 10 * 10 daje 100
- obliczenie ... daje 765
- obliczenie długości listy daje 5

Czym dokładnie są obliczenia, dowiemy się później. Na razie wystarczy
nam wiedzieć, że każdy term zamknięty, czyli taki, o którym wiadomo
wystarczająco dużo, oblicza się do postaci normalnej, np. 5 + 1 oblicza
się do 6. Jeżeli jednak czegoś nie wiadomo, to term się nie oblicza, np.
n + 1 nie wiadomo ile wynosi, jeżeli nie wiadomo, co oznacza n.

Podsumowując, każdy element jest termem, a każdy term oblicza się do
postaci normalnej, czyli do elementu.
